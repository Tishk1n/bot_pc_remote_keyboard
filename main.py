from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
import asyncio
from config import TOKEN
import requests
from bs4 import BeautifulSoup
import webbrowser
from aiogram.utils.markdown import hbold, hitalic
from database import Database
import subprocess
import win32gui
import win32con
import win32api
from fake_useragent import UserAgent
import logging
from ctypes import Structure, c_ulong, c_ushort, c_short, POINTER, windll, Union, c_void_p, sizeof, c_long, byref, pointer
import time
from voice_handler import VoiceHandler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéå –ê–Ω–∏–º–µ")],
        [KeyboardButton(text="‚ö°Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")]
    ],
    resize_keyboard=True
)

anime_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton(text="‚è© –í–ø–µ—Ä–µ–¥ 10 —Å–µ–∫"), KeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ 10 —Å–µ–∫")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è"), KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")]
    ],
    resize_keyboard=True
)

class SearchStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_choice = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_results = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    db.log_user(message.from_user.id, message.from_user.username)
    stats = db.get_statistics()
    
    welcome_text = (
        f"üéâ {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anime Control Bot!')}\n\n"
        f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:')}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hitalic(stats['total_users'])}\n"
        f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {hitalic(stats['total_commands'])}\n"
        f"üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–Ω–∏–º–µ: {hitalic(stats['total_anime'])}\n\n"
        f"üèÜ {hbold('–¢–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ:')}\n"
    )
    
    if stats['top_anime']:
        for title, count in stats['top_anime']:
            welcome_text += f"‚Ä¢ {title}: {count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    
    await message.answer(welcome_text, reply_markup=main_kb, parse_mode="HTML")
    db.log_command(message.from_user.id, "start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∏–º–µ"
@dp.message(F.text == "üéå –ê–Ω–∏–º–µ")
async def anime_menu(message: types.Message):
    db.log_command(message.from_user.id, "anime_menu")
    await message.answer(
        f"üéÆ {hbold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–µ:')}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º",
        reply_markup=anime_kb,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"
@dp.message(F.text == "‚ö°Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")
async def shutdown_pc(message: types.Message):
    db.log_command(message.from_user.id, "shutdown")
    subprocess.run(["shutdown", "/s", "/t", "10", "/c", "–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"])
    await message.answer("‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")

def find_browser_window():
    """–ü–æ–∏—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    def callback(hwnd, windows):
        if win32gui.IsWindowVisible(hwnd):
            title = win32gui.GetWindowText(hwnd).lower()
            if 'chrome' in title or 'firefox' in title or 'edge' in title:
                windows.append(hwnd)
        return True
    
    windows = []
    win32gui.EnumWindows(callback, windows)
    if windows:
        win32gui.SetForegroundWindow(windows[0])
        return True
    return False

def send_key(key):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    if find_browser_window():
        if isinstance(key, str):
            win32api.keybd_event(ord(key.upper()), 0, 0, 0)
            win32api.keybd_event(ord(key.upper()), 0, win32con.KEYEVENTF_KEYUP, 0)
        else:
            win32api.keybd_event(key, 0, 0, 0)
            win32api.keybd_event(key, 0, win32con.KEYEVENTF_KEYUP, 0)

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä
class MOUSEINPUT(Structure):
    _fields_ = (
        ("dx", c_long),
        ("dy", c_long),
        ("mouseData", c_ulong),
        ("dwFlags", c_ulong),
        ("time", c_ulong),
        ("dwExtraInfo", c_void_p)
    )

class KEYBDINPUT(Structure):
    _fields_ = (
        ("wVk", c_ushort),
        ("wScan", c_ushort),
        ("dwFlags", c_ulong),
        ("time", c_ulong),
        ("dwExtraInfo", c_void_p)
    )

class HARDWAREINPUT(Structure):
    _fields_ = (
        ("uMsg", c_ulong),
        ("wParamL", c_short),
        ("wParamH", c_ushort)
    )

class INPUT_UNION(Union):
    _fields_ = (
        ("mi", MOUSEINPUT),
        ("ki", KEYBDINPUT),
        ("hi", HARDWAREINPUT),
    )

class INPUT(Structure):
    _fields_ = (
        ("type", c_ulong),
        ("union", INPUT_UNION),
    )

def send_key_press(key_code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ SendInput"""
    try:
        extra = c_ulong(0)
        ii_ = INPUT_UNION()
        ii_.ki = KEYBDINPUT(key_code, 0, 0, 0, byref(extra))
        x = INPUT(c_ulong(1), ii_)
        windll.user32.SendInput(1, byref(x), sizeof(x))
        
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º
        
        ii_.ki = KEYBDINPUT(key_code, 0, 0x0002, 0, byref(extra))  # KEYEVENTF_KEYUP
        x = INPUT(c_ulong(1), ii_)
        windll.user32.SendInput(1, byref(x), sizeof(x))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ SendInput: {e}")

def send_media_key(key_code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏—à –≤ –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
        hwnd = win32gui.FindWindow(None, "Rutube")
        if not hwnd:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏ Rutube, –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            def callback(hwnd, windows):
                if win32gui.IsWindowVisible(hwnd):
                    title = win32gui.GetWindowText(hwnd).lower()
                    if 'rutube' in title:
                        windows.append(hwnd)
                return True
            
            windows = []
            win32gui.EnumWindows(callback, windows)
            if windows:
                hwnd = windows[0]
        
        if hwnd:
            win32gui.SetForegroundWindow(hwnd)
            time.sleep(0.1)  # –î–∞–µ–º –æ–∫–Ω—É –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏
            win32api.PostMessage(hwnd, win32con.WM_KEYDOWN, key_code, 0)
            time.sleep(0.05)
            win32api.PostMessage(hwnd, win32con.WM_KEYUP, key_code, 0)
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏: {e}")
    return False

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def find_video_window():
    """–ü–æ–∏—Å–∫ –æ–∫–Ω–∞ —Å –≤–∏–¥–µ–æ"""
    try:
        def callback(hwnd, windows):
            if win32gui.IsWindowVisible(hwnd):
                try:
                    title = win32gui.GetWindowText(hwnd).lower()
                    if any(x in title for x in ['rutube', 'chrome', 'firefox', 'edge', '—Å–º–æ—Ç—Ä–µ—Ç—å']):
                        windows.append(hwnd)
                        return False
                except Exception:
                    pass
            return True
        
        windows = []
        win32gui.EnumWindows(callback, windows)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = time.time()
        while not windows and time.time() - start_time < 3:  # 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
            time.sleep(0.1)
            win32gui.EnumWindows(callback, windows)
            
        return windows[0] if windows else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–∫–Ω–∞: {e}")
        return None

def send_input_key(vk_code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ SendInput —Å —É—á–µ—Ç–æ–º —Å–∫–∞–Ω-–∫–æ–¥–∞"""
    try:
        hwnd = find_video_window()
        if not hwnd:
            return False
            
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
        try:
            win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
            win32gui.SetForegroundWindow(hwnd)
            time.sleep(0.5)  # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞: {e}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∞–Ω-–∫–æ–¥ –∫–ª–∞–≤–∏—à–∏
        scan_code = win32api.MapVirtualKey(vk_code, 0)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è SendInput
        extra = c_ulong(0)
        ii_ = INPUT_UNION()
        
        # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
        ii_.ki = KEYBDINPUT(0, scan_code, 0x0008, 0, pointer(extra))  # KEYEVENTF_SCANCODE
        x = INPUT(c_ulong(1), ii_)
        windll.user32.SendInput(1, pointer(x), sizeof(x))
        
        time.sleep(0.1)
        
        # –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏
        ii_.ki = KEYBDINPUT(0, scan_code, 0x0008 | 0x0002, 0, pointer(extra))  # KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP
        x = INPUT(c_ulong(1), ii_)
        windll.user32.SendInput(1, pointer(x), sizeof(x))
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏—à–∏: {e}")
        return False

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(F.text == "‚è∏ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def toggle_pause(message: types.Message):
    if send_input_key(0x20):  # VK_SPACE
        await message.answer("‚è∏ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")

@dp.message(F.text == "‚è© –í–ø–µ—Ä–µ–¥ 10 —Å–µ–∫")
async def forward_10(message: types.Message):
    if send_input_key(0x27):  # VK_RIGHT
        await message.answer("‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")

@dp.message(F.text == "‚è™ –ù–∞–∑–∞–¥ 10 —Å–µ–∫")
async def backward_10(message: types.Message):
    if send_input_key(0x25):  # VK_LEFT
        await message.answer("‚è™ –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")

@dp.message(F.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è")
async def previous_episode(message: types.Message):
    if send_input_key(0x50):  # 'P'
        await message.answer("‚¨ÖÔ∏è –í–∫–ª—é—á–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")

@dp.message(F.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")
async def next_episode(message: types.Message):
    if send_input_key(0x4E):  # 'N'
        await message.answer("‚û°Ô∏è –í–∫–ª—é—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ —Å –≤–∏–¥–µ–æ")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")
async def search_anime(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

@dp.message(SearchStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    search_query = message.text
    db.log_command(message.from_user.id, f"search_anime:{search_query}")
    
    await message.answer(f"üîç {hitalic('–ò—â—É –∞–Ω–∏–º–µ')} {hbold(search_query)}...", parse_mode="HTML")
    
    try:
        ua = UserAgent()
        headers = {
            'User-Agent': ua.random,
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        url = f"https://rutube.ru/api/search/video/?query={search_query}+–∞–Ω–∏–º–µ&format=json"
        response = requests.get(url, headers=headers)
        data = response.json()
        
        if not data.get('results'):
            await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for result in data['results'][:5]:
            title = result.get('title', '').strip()[:50]
            video_id = result.get('id', '')
            if title and video_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π callback_data
                keyboard.append([InlineKeyboardButton(
                    text=f"üé¨ {title}",
                    callback_data=f"v:{video_id}"
                )])

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('v:'))
async def process_anime_selection(callback_query: types.CallbackQuery):
    try:
        video_id = callback_query.data.split(':')[1]
        url = f"https://rutube.ru/video/{video_id}/"
        
# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        api_url = f"https://rutube.ru/api/video/{video_id}/"
        response = requests.get(api_url)
        video_data = response.json()
        title = video_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ')

        db.log_anime_view(callback_query.from_user.id, title)
        await callback_query.message.answer(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é: {title}")

        webbrowser.open(url)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–ª–µ–µ—Ä–∞
        await asyncio.sleep(7)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if send_input_key(0x46):  # 'F'
            await callback_query.message.answer("‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        else:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            send_input_key(0x0D)  # Enter –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–ª–µ–µ—Ä–µ
            await asyncio.sleep(0.5)
            send_input_key(0x46)  # F —Å–Ω–æ–≤–∞
            await callback_query.message.answer("‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–∞
voice_handler = VoiceHandler()

@dp.message(F.voice)
async def handle_voice(message: types.Message, state: FSMContext):
    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("temp", exist_ok=True)
        voice_path = os.path.join("temp", f"voice_{message.message_id}.ogg")
        
        try:
            await bot.download_file(file_path, voice_path)
            
            audio = sr.AudioFile(voice_path)
            with audio as source:
                audio_data = voice_handler.recognizer.record(source)
            
            text = voice_handler.recognize_command(audio_data)
            
            if not text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                return
                
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            command, query = voice_handler.parse_command(text)
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã...
            current_state = await state.get_state()
            if current_state == "SearchStates:waiting_for_choice":
                if command == "select" and isinstance(query, int):
                    user_results = search_results.get(message.from_user.id, [])
                    if 1 <= query <= len(user_results):
                        selected_video = user_results[query - 1]
                        video_id = selected_video.get('id', '')
                        if video_id:
                            await process_anime_selection_voice(message, video_id)
                            await state.clear()
                            search_results.pop(message.from_user.id, None)
                            return
                    else:
                        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.")
                        return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if command == "search":
                results = voice_handler.search_anime(query)
                if results:
                    search_results[message.from_user.id] = results
                    await state.set_state(SearchStates.waiting_for_choice)
            elif command == "forward":
                if send_input_key(0x27):  # VK_RIGHT
                    await message.answer("‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥")
            elif command == "backward":
                if send_input_key(0x25):  # VK_LEFT
                    await message.answer("‚è™ –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥")
            elif command == "next":
                if send_input_key(0x4E):  # 'N'
                    await message.answer("‚û°Ô∏è –í–∫–ª—é—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")
            elif command == "previous":
                if send_input_key(0x50):  # 'P'
                    await message.answer("‚¨ÖÔ∏è –í–∫–ª—é—á–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è")
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(voice_path):
                    os.remove(voice_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def process_anime_selection_voice(message: types.Message, video_id: str):
    try:
        url = f"https://rutube.ru/video/{video_id}/"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        api_url = f"https://rutube.ru/api/video/{video_id}/"
        response = requests.get(api_url)
        video_data = response.json()
        title = video_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ')

        db.log_anime_view(message.from_user.id, title)
        voice_handler.speak(f"–ó–∞–ø—É—Å–∫–∞—é –≤–∏–¥–µ–æ: {title}")
        await message.answer(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é: {title}")

        webbrowser.open(url)
        
        await asyncio.sleep(7)
        
        if send_input_key(0x46):  # 'F'
            await message.answer("‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        else:
            send_input_key(0x0D)
            await asyncio.sleep(0.5)
            send_input_key(0x46)
            await message.answer("‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

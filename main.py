from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
import asyncio
from config import TOKEN
import requests
from bs4 import BeautifulSoup
import webbrowser
from aiogram.utils.markdown import hbold, hitalic
from database import Database
import pyautogui
import subprocess

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéå –ê–Ω–∏–º–µ")],
        [KeyboardButton(text="‚ö°Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")]
    ],
    resize_keyboard=True
)

anime_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton(text="‚è© –í–ø–µ—Ä–µ–¥ 10 —Å–µ–∫"), KeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ 10 —Å–µ–∫")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è"), KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")]
    ],
    resize_keyboard=True
)

class SearchStates(StatesGroup):
    waiting_for_title = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    db.log_user(message.from_user.id, message.from_user.username)
    stats = db.get_statistics()
    
    welcome_text = (
        f"üéâ {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anime Control Bot!')}\n\n"
        f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:')}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {hitalic(stats['total_users'])}\n"
        f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {hitalic(stats['total_commands'])}\n"
        f"üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–Ω–∏–º–µ: {hitalic(stats['total_anime'])}\n\n"
        f"üèÜ {hbold('–¢–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ:')}\n"
    )
    
    if stats['top_anime']:
        for title, count in stats['top_anime']:
            welcome_text += f"‚Ä¢ {title}: {count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    
    await message.answer(welcome_text, reply_markup=main_kb, parse_mode="HTML")
    db.log_command(message.from_user.id, "start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∏–º–µ"
@dp.message(F.text == "üéå –ê–Ω–∏–º–µ")
async def anime_menu(message: types.Message):
    db.log_command(message.from_user.id, "anime_menu")
    await message.answer(
        f"üéÆ {hbold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–µ:')}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º",
        reply_markup=anime_kb,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"
@dp.message(F.text == "‚ö°Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")
async def shutdown_pc(message: types.Message):
    db.log_command(message.from_user.id, "shutdown")
    subprocess.run(["shutdown", "/s", "/t", "10", "/c", "–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"])
    await message.answer("‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ
@dp.message(F.text == "‚è∏ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def toggle_pause(message: types.Message):
    db.log_command(message.from_user.id, "pause_play")
    pyautogui.press('space')
    await message.answer("‚è∏ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")

@dp.message(F.text == "‚è© –í–ø–µ—Ä–µ–¥ 10 —Å–µ–∫")
async def forward_10(message: types.Message):
    db.log_command(message.from_user.id, "forward")
    pyautogui.press('right')
    await message.answer("‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥")

@dp.message(F.text == "‚è™ –ù–∞–∑–∞–¥ 10 —Å–µ–∫")
async def backward_10(message: types.Message):
    db.log_command(message.from_user.id, "backward")
    pyautogui.press('left')
    await message.answer("‚è™ –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥")

@dp.message(F.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è")
async def previous_episode(message: types.Message):
    db.log_command(message.from_user.id, "previous_episode")
    pyautogui.press('p')  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'p' - –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Ä–∏–∏
    await message.answer("‚¨ÖÔ∏è –í–∫–ª—é—á–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è")

@dp.message(F.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")
async def next_episode(message: types.Message):
    db.log_command(message.from_user.id, "next_episode")
    pyautogui.press('n')
    await message.answer("‚û°Ô∏è –í–∫–ª—é—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ")
async def search_anime(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

@dp.message(SearchStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    search_query = message.text
    db.log_command(message.from_user.id, f"search_anime:{search_query}")
    
    await message.answer(f"üîç {hitalic('–ò—â—É –∞–Ω–∏–º–µ')} {hbold(search_query)}...", parse_mode="HTML")
    
    # –ü–æ–∏—Å–∫ –Ω–∞ RUTUBE
    url = f"https://rutube.ru/search/?query={search_query}+–∞–Ω–∏–º–µ"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è)
    results = soup.find_all('div', class_='search-item')
    
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for result in results[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        title = result.find('a').text
        link = "https://rutube.ru" + result.find('a')['href']
        keyboard.add(InlineKeyboardButton(
            text=f"üé¨ {title}", 
            callback_data=f"anime:{link}:{title}"
        ))

    await message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:", reply_markup=keyboard)
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith('anime:'))
async def process_anime_selection(callback_query: types.CallbackQuery):
    data = callback_query.data.split(':')
    link = data[1]
    title = data[2]
    
    db.log_anime_view(callback_query.from_user.id, title)
    await callback_query.message.answer(
        f"‚ñ∂Ô∏è {hbold('–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∏–º–µ:')} {hitalic(title)}",
        parse_mode="HTML"
    )
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    webbrowser.open(link)
    
    # –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    await asyncio.sleep(3)
    pyautogui.press('f')
    
    await callback_query.message.answer("–ê–Ω–∏–º–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    await callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
